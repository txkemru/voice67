import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn
# from fpdf import FPDF # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç FPDF
import asyncio
import threading
import base64
import json
import uuid # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º uuid –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['BOT_TOKEN', 'ADMIN_ID']
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
FEEDBACK_FILE = 'feedback_data.json'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
feedback_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_feedback():
    global feedback_data
    if os.path.exists(FEEDBACK_FILE):
        with open(FEEDBACK_FILE, 'r', encoding='utf-8') as f:
            try:
                feedback_data = json.load(f)
            except json.JSONDecodeError:
                feedback_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ñ–∞–π–ª
def save_feedback():
    global feedback_data
    with open(FEEDBACK_FILE, 'w', encoding='utf-8') as f:
        json.dump(feedback_data, f, indent=4, ensure_ascii=False)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞ (–¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã)
admin_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://laughingly-innovative-gelding.cloudpub.ru/")))
    keyboard.add(KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"))
    keyboard.add(KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://laughingly-innovative-gelding.cloudpub.ru/")))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if user_id in admin_states and admin_states[user_id]['state'] == 'awaiting_reply':
            del admin_states[user_id]
            await message.answer("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_admin_keyboard())
        else:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
                reply_markup=get_admin_keyboard()
            )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Support Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è SpeechAI Assistant.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
            reply_markup=get_user_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.message_handler(Text(equals="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
async def feedback_start(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –∏ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    existing_feedback = next((f for f in feedback_data.values() if f['user_id'] == user_id and f['status'] == 'waiting'), None)
    if existing_feedback:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        return

    feedback_data[user_id] = {"state": "waiting_feedback_content"} # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤
    if user_id == ADMIN_ID and user_id in admin_states and admin_states[user_id]['state'] == 'awaiting_reply':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã
        if message.text == '/cancel_reply':
            del admin_states[user_id]
            await message.answer("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        feedback_id = admin_states[user_id]['feedback_id']
        if feedback_id in feedback_data:
            feedback_user_id = feedback_data[feedback_id]['user_id']
            try:
                await bot.send_message(
                    feedback_user_id,
                    f"‚úâÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n{message.text}"
                )
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                # Optionally mark as processed
                # feedback_data[feedback_id]['status'] = 'processed'
                # save_feedback()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {feedback_user_id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
            finally:
                del admin_states[user_id] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if user_id == ADMIN_ID:
        if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            total_feedback = len(feedback_data)
            waiting_feedback = sum(1 for f in feedback_data.values() if f.get('status') == 'waiting')
            processed_feedback = total_feedback - waiting_feedback
            await message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n"
                f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedback}\n"
                f"–û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {waiting_feedback}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_feedback}"
            )
        elif message.text == "üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            await send_feedback_list(message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
    if user_id in feedback_data and feedback_data[user_id]["state"] == "waiting_feedback_content":
        feedback_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        feedback_data[feedback_id] = {
            "id": feedback_id,
            "user_id": user_id,
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
            "type": "text",
            "feedback": message.text,
            "status": "waiting",
            "timestamp": message.date.timestamp()
        }
        del feedback_data[user_id] # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        save_feedback() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_notification = (
            f"üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (—Ç–µ–∫—Å—Ç) –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n"
            f"{message.text}\n"
            f"ID –æ—Ç–∑—ã–≤–∞: {feedback_id}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup()
        admin_keyboard.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{feedback_id}'))
        admin_keyboard.add(InlineKeyboardButton("–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", callback_data=f'process_{feedback_id}'))

        await bot.send_message(
            ADMIN_ID,
            admin_notification,
            reply_markup=admin_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.message_handler(content_types=['voice'])
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–∑—ã–≤
    if user_id in feedback_data and feedback_data[user_id]["state"] == "waiting_feedback_content":
        feedback_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        feedback_data[feedback_id] = {
            "id": feedback_id,
            "user_id": user_id,
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
            "type": "voice",
            "feedback": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–º–µ—Ç–∫—É, —Å–∞–º–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è
            "file_id": message.voice.file_id, # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "status": "waiting",
            "timestamp": message.date.timestamp()
        }
        del feedback_data[user_id] # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        save_feedback() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_notification = (
            f"üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–≥–æ–ª–æ—Å) –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n"
            f"ID –æ—Ç–∑—ã–≤–∞: {feedback_id}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup()
        admin_keyboard.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{feedback_id}'))
        admin_keyboard.add(InlineKeyboardButton("–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", callback_data=f'process_{feedback_id}'))

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.forward_message(
            ADMIN_ID,
            message.chat.id,
            message.message_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
        await bot.send_message(
             ADMIN_ID,
             admin_notification,
             reply_markup=admin_keyboard
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω—É
async def send_feedback_list(message: types.Message):
    waiting_feedbacks = {k: v for k, v in feedback_data.items() if v.get('status') == 'waiting'}
    if not waiting_feedbacks:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    await message.answer(f"üì¨ –û—Ç–∑—ã–≤—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(waiting_feedbacks)}):")

    for feedback_id, feedback in waiting_feedbacks.items():
        user_info = f"{feedback.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (@{feedback.get('username', '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞')})"
        feedback_preview = feedback.get('feedback', '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]')[:100] + '...' if len(feedback.get('feedback', '')) > 100 else feedback.get('feedback', '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]')
        feedback_type = "–¢–µ–∫—Å—Ç" if feedback.get('type') == 'text' else "–ì–æ–ª–æ—Å"

        admin_keyboard = InlineKeyboardMarkup()
        admin_keyboard.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{feedback_id}'))
        admin_keyboard.add(InlineKeyboardButton("–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", callback_data=f'process_{feedback_id}'))
        # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # if feedback_type == "–ì–æ–ª–æ—Å":
        #     admin_keyboard.add(InlineKeyboardButton("–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f'listen_{feedback_id}'))

        await message.answer(
            f"--- –û—Ç–∑—ã–≤ ID: {feedback_id} ({feedback_type}) ---\n"
            f"–û—Ç: {user_info}\n"
            f"–¢–µ–∫—Å—Ç/—Ç–∏–ø: {feedback_preview}",
            reply_markup=admin_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data and (c.data.startswith('reply_') or c.data.startswith('process_')))
async def process_callback_buttons(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    data = callback_query.data.split('_')
    action = data[0]
    feedback_id = data[1]

    if feedback_id not in feedback_data:
        await callback_query.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
        except:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ
        return

    feedback = feedback_data[feedback_id]

    if action == 'reply':
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
        admin_states[ADMIN_ID] = {'state': 'awaiting_reply', 'feedback_id': feedback_id}
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        cancel_button = "/cancel_reply"
        cancel_markup.add(cancel_button)
        await bot.send_message(ADMIN_ID, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID {feedback_id}:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel_reply", reply_markup=cancel_markup)
        await callback_query.answer("–û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...")

    elif action == 'process':
        feedback['status'] = 'processed'
        save_feedback()
        await callback_query.answer("‚úÖ –û—Ç–∑—ã–≤ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –º–µ–Ω—è—è –∏—Ö
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å —ç—Ç–∏–º –æ—Ç–∑—ã–≤–æ–º, —á—Ç–æ–±—ã –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ, –µ—Å–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –º–Ω–æ–≥–æ –∏ –∞–¥–º–∏–Ω –∏—Ö –ª–∏—Å—Ç–∞–µ—Ç.
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏.
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # await bot.edit_message_text(
            #     chat_id=callback_query.message.chat.id,
            #     message_id=callback_query.message.message_id,
            #     text=callback_query.message.text + "\n\n‚úÖ –û–ë–†–ê–ë–û–¢–ê–ù–û"
            # )
        except Exception as e:
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ {feedback_id}: {e}")
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             await bot.send_message(ADMIN_ID, f"‚úÖ –û—Ç–∑—ã–≤ ID {feedback_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message_handler(Text(equals="‚ùì –ü–æ–º–æ—â—å"))
async def help_command(message: types.Message):
    help_text = (
        "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
        "1. –î–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω (Android/–ü–ö)\n"
        "2. –î–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n"
        "3. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é PDF\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'"
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=['web_app_data'])
async def web_app_handler(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        if data.get('type') == 'pdf':
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º PDF –∏–∑ base64
            pdf_data = base64.b64decode(data['data'])
            filename = data.get('filename', 'chat.pdf')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"temp_{filename}"
            with open(temp_file, 'wb') as f:
                f.write(pdf_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(temp_file, 'rb') as f:
                await bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"–í–∞—à PDF-—Ñ–∞–π–ª —Å —á–∞—Ç–æ–º: {filename}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_file)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

app = FastAPI()

def run_fastapi():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ FastAPI, –µ—Å–ª–∏ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, FastAPI –Ω–µ –Ω—É–∂–µ–Ω
    if app.routes:
        uvicorn.run(app, host="0.0.0.0", port=8080)
    else:
        logging.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤. –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º uvicorn.")

if __name__ == '__main__':
    load_feedback() # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
    if app.routes:
        threading.Thread(target=run_fastapi, daemon=True).start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    executor.start_polling(dp, skip_updates=True)
