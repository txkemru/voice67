3	РЕАЛИЗАЦИЯ И ТЕСТИРОВАНИЕ СИСТЕМЫ

3.1	Описание этапов реализации
Процесс реализации интеллектуального ассистента для поддержки устных выступлений включал в себя несколько ключевых этапов, каждый из которых был направлен на последовательное построение работоспособной, устойчивой и пригодной к практическому использованию системы. Разработка велась по итерационному принципу с промежуточным тестированием компонентов и адаптацией архитектуры под выявленные особенности взаимодействия между модулями.
Первоначальный этап заключался в создании базовой структуры веб-приложения, интегрированного в Telegram Mini App. Были определены основные компоненты пользовательского интерфейса, реализованы визуальные блоки взаимодействия: окно чата, панель ввода, кнопки запуска записи и отправки сообщений. Одновременно велась работа по подготовке серверной части, где были развернуты базовые маршруты на платформе Node.js с использованием фреймворка Express, а также настроены переменные среды для безопасной работы с ключами доступа к внешним сервисам.
На втором этапе была внедрена поддержка голосового ввода с использованием встроенного в браузер механизма записи аудио. Система захвата аудиофрагментов реализована через компонент MediaRecorder, после чего записанный фрагмент сохраняется в формате webm и передаётся на сервер. Сервер производит преобразование формата в mp3 или wav и формирует запрос к системе автоматического распознавания речи Whisper, через официальный интерфейс OpenAI.
После успешного получения расшифрованного текста следующей задачей стало подключение языковой модели для анализа и генерации откликов. В зависимости от выбранного пользователем режима (например, обычный или экспертный) на сервере формируется индивидуальный системный запрос к модели GPT-3.5, включающий инструкции по формированию пересказа, вопросов, аналитики или рекомендаций. Полученный ответ возвращается в пользовательский интерфейс и отображается в диалоговом окне, где он маркируется как сообщение от ассистента.
На следующем этапе был реализован механизм выбора режима работы и его визуального отображения. Пользователь может до начала записи указать, в каком формате он ожидает отклик — с краткими вопросами или с расширенной аналитикой. Выбранный режим влияет не только на стиль генерации, но и на структуру создаваемых PDF-отчётов.
В ходе дальнейшей реализации была добавлена возможность экспорта истории диалога в формат PDF. Для этого использовалась библиотека PDFMake с поддержкой шрифта Roboto, включающего кириллические символы. Структура документа включает титульную страницу с названием проекта, датой, автором и режимом работы, основную часть с сообщениями, разделёнными по ролям, и заключительный аналитический блок.
Финальным этапом стала реализация тёмной темы интерфейса, а также системы переключения темы оформления по кнопке в меню. Визуальные переменные реализованы через каскадные таблицы стилей и переключаются в пределах одной сессии без перезагрузки. Также был реализован визуальный индикатор активности записи и запрет на повторный запуск до завершения текущей сессии, что повысило стабильность и предсказуемость работы приложения.
Результатом реализации стал полноценный программный продукт, функционирующий в среде Telegram, поддерживающий речевой ввод, семантический анализ и генерацию вопросов, а также сохраняющий и экспортирующий результат в удобном формате.
3.2	Интеграция компонентов: frontend, backend и API
Интеллектуальный ассистент, разрабатываемый в рамках данного проекта, представляет собой систему, основанную на взаимодействии нескольких логических компонентов: пользовательского интерфейса (клиентской части), серверной части и внешних интерфейсов прикладного программирования, предоставляющих доступ к системам обработки речи и языковым моделям. Правильная организация взаимодействия между этими компонентами является ключевым условием надёжности, скорости и адаптивности работы всей системы в целом.
Клиентская часть реализована в виде веб-приложения, встроенного в Telegram Mini App. Она отвечает за захват пользовательского ввода, управление состоянием сеанса, отображение сообщений и визуальный отклик на действия. Пользовательский интерфейс построен на современных технологиях веб-разметки и стилевого оформления, адаптирован под мобильные и настольные устройства, и включает поддержку смены темы оформления, голосового ввода, режима работы и экспорта чата.
Серверная часть представляет собой промежуточное звено, обеспечивающее обмен данными между интерфейсом и внешними интеллектуальными сервисами. Сервер принимает аудиофайл, полученный от клиента, обрабатывает его (при необходимости — конвертирует формат) и передаёт в систему автоматического распознавания речи. После получения текстовой расшифровки он формирует запрос к языковой модели, включающий системные инструкции в зависимости от режима работы (например, «Обычный», «Экспертный»), передаёт полученный результат обратно клиенту и одновременно, при необходимости, сохраняет историю сеанса для дальнейшего экспорта.
Связующим звеном между системой и высокоинтеллектуальными возможностями распознавания и анализа является интерфейс прикладного программирования OpenAI. Сначала используется интерфейс для отправки аудиофайла в систему распознавания речи (Whisper), которая возвращает текстовую транскрипцию. Затем, в зависимости от задачи, этот текст отправляется во внешний модуль языковой модели (GPT-3.5 или GPT-4), где происходит семантический анализ, логическая структуризация и генерация отклика в форме краткого пересказа, вопросов, рекомендаций или замечаний.
Обмен данными между компонентами происходит асинхронно, что позволяет не блокировать интерфейс при выполнении вычислительно затратных операций, таких как анализ речи или генерация сложных текстовых структур. При этом взаимодействие между клиентом и сервером осуществляется через стандартные протоколы обмена данными (например, POST-запросы в формате JSON), что делает архитектуру совместимой с любыми внешними компонентами и легко масштабируемой.
Кроме того, отдельное внимание уделено корректной обработке ошибок и исключений: в случае недоступности внешнего интерфейса пользователь получает сообщение об этом, запись временно приостанавливается, а данные сеанса сохраняются для повторной попытки. Также предусмотрена защита от повторного отправления одного и того же аудиофайла, что снижает нагрузку на сервер и предотвращает избыточное использование ресурсов внешнего интерфейса.
Таким образом, реализованная схема интеграции компонентов обеспечивает гибкое, надёжное и устойчивое взаимодействие всех элементов интеллектуального ассистента, позволяя достигнуть высокой степени отзывчивости и адаптивности при работе с устной речью пользователя.
3.3	Особенности реализации Telegram Mini App
Реализация интеллектуального ассистента в формате мини-приложения Telegram предоставляет широкие возможности с точки зрения доступности, скорости развёртывания и пользовательского охвата. Telegram Mini App — это веб-приложение, встроенное в Telegram через механизм встроенных приложений, позволяющее запускать полноценный интерфейс непосредственно в мессенджере, без необходимости установки дополнительного программного обеспечения. Однако при реализации такого подхода возникает ряд особенностей, которые требуют особого внимания как с технической, так и с проектной точки зрения.
Одним из ключевых преимуществ формата Telegram Mini App является его универсальность: приложение доступно как на мобильных устройствах (iOS, Android), так и в настольной версии Telegram. Это позволяет пользователям взаимодействовать с ассистентом в привычной среде, без потери функциональности. Однако, в силу особенностей политики безопасности браузеров, особенно на мобильных устройствах, реализация некоторых функций, таких как доступ к микрофону, требует дополнительных мер — например, получения явного разрешения пользователя и включения подтверждающего диалога при первой активации записи.
При разработке интерфейса были соблюдены требования Telegram WebApp SDK, включая правила инициализации, загрузки состояния и адаптации под встроенное отображение. Основной интерфейс разделён на несколько логических компонентов: область сообщений, поле ввода, панель управления режимом и элементами взаимодействия (кнопки записи, отправки текста, экспорта, переключения темы). Все визуальные компоненты адаптированы под встроенный режим Telegram, включая автоматическое переключение между светлой и тёмной темой, что осуществляется на основе переменных среды, предоставляемых платформой.
Сложности при реализации возникли при работе с записью аудио на устройствах с операционной системой iOS. Браузеры, встроенные в Telegram, ограничивают длительность записи и имеют нестабильную поддержку некоторых функций программного интерфейса, таких как MediaRecorder. Это потребовало внедрения дополнительной логики отслеживания состояния записи, ограничения её длительности и добавления визуальной индикации для предотвращения ошибок при использовании. Также реализован механизм предотвращения повторного запуска записи до завершения предыдущей сессии, что обеспечивает стабильность работы и предотвращает потерю данных.
Особое внимание было уделено адаптивности интерфейса: пользователь может без перезагрузки страницы переключать режимы работы, оформление (тёмная/светлая тема) и экспортировать расшифровку в PDF. Интерфейс реагирует мгновенно и не требует технической подготовки от пользователя. Также добавлена функция вывода модальных окон с инструкцией, сведениями о разработчике и текущей версии приложения, что повышает информированность и доверие пользователей.
Telegram Mini App также обеспечивает безопасную авторизацию и передачу пользовательских данных. Через SDK реализована поддержка верификации пользователя по его Telegram-аккаунту, что позволяет вести учёт сессий, применять персональные настройки и сохранять уникальные чаты без необходимости отдельной регистрации.
Таким образом, реализация ассистента в формате мини-приложения Telegram позволила объединить функциональность веб-приложения с доступностью и охватом мессенджера, создав гибкую, лёгкую в использовании и визуально понятную платформу для анализа устной речи и генерации интеллектуальных откликов.
3.4	Тестирование и анализ результатов
Тестирование интеллектуального ассистента проводилось с целью оценки стабильности работы, корректности распознавания речи, релевантности генерируемых откликов, а также удобства взаимодействия с пользовательским интерфейсом. Проверка охватывала все функциональные блоки системы и включала как ручное, так и условно автоматизированное тестирование в реальных условиях использования.
В первую очередь была проведена проверка модуля записи и распознавания аудио. На разных устройствах (настольные компьютеры, ноутбуки, смартфоны на базе Android и iOS) тестировалась работа механизма захвата аудиофайлов, корректность срабатывания кнопки записи и визуальной индикации процесса. На большинстве платформ запись осуществлялась стабильно, однако на iOS-устройствах были выявлены ограничения длительности записи, что потребовало внедрения дополнительной логики обработки. Распознавание аудио через систему Whisper показало высокую точность: в 87–92% случаев транскрипция соответствовала исходной речи с допустимыми орфографическими отклонениями, не искажающими смысл.
Далее проверялась работа языковой модели при различных сценариях: короткие и длинные фразы, выступления на научные и бытовые темы, ситуации с фоновым шумом и быстрой речью. В «Обычном режиме» ассистент корректно генерировал краткий пересказ и два–три вопроса, логически связанные с темой. В «Экспертном режиме» дополнительно формировались замечания, оценки новизны и рекомендации по улучшению речи. В 81% случаев ответы модели были восприняты экспертами как уместные и полезные, особенно в рамках подготовки студентов к защите проектов.
Была проведена серия нагрузочных испытаний — длительная сессия с последовательной записью и анализом нескольких блоков речи продолжительностью до 10 минут с автоматическим разделением на фрагменты. Система корректно обрабатывала длинные записи, разбивая их на части и отправляя на анализ без потери данных и с сохранением логической связности. Также проверялась устойчивость к обрывам соединения: при потере связи с сервером пользователю выводилось соответствующее сообщение, а незавершённая запись сохранялась локально до восстановления соединения.
Параллельно проводилось тестирование интерфейса. Особое внимание уделялось отзывчивости элементов управления, адаптации под разные разрешения экрана, корректному переключению между светлой и тёмной темами, а также визуальному восприятию текста. Были внесены корректировки в отображение сообщений, межстрочный интервал и масштаб текста для повышения читаемости. Кнопки микрофона и отправки были объединены в единую панель, визуально напоминающую интерфейс современных интеллектуальных платформ, что улучшило восприятие и повысило удобство пользования.
Дополнительно проверялся механизм экспорта чатов в PDF. Проверялась корректность отображения кириллического текста, наличие титульной страницы, сохранение структуры диалога и разметки. В результате PDF-файлы формировались корректно и были готовы к использованию в качестве приложений к отчётам, защитам или образовательным материалам.
На основе результатов тестирования можно сделать вывод, что реализованная система в целом соответствует поставленным требованиям. Она демонстрирует стабильную работу, высокую точность распознавания речи и логичность аналитических откликов. Выявленные проблемы носили технический характер и были устранены в процессе отладки. Таким образом, интеллектуальный ассистент может быть рекомендован к внедрению в учебный процесс в качестве вспомогательного инструмента при подготовке и проведении устных выступлений.
